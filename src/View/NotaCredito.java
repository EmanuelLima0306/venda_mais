/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Controller.ClienteController;
import Util.DataComponent;
import Controller.DocumentoController12;
import Controller.EntradaStockItemController;
import Controller.FacturaController;
import Controller.FacturaItemController;
import Controller.MovimentoController;
import Controller.MovimentoItemController;
import Controller.ParamentroController;
import Enum.TipoLog;
import Ireport.MovimentoIreport;
import Model.ClienteModel;
import Model.EntradaStockItemModel;
import Model.EstadoModel;
import Model.FacturaItemModel;
import Model.FacturaModel;
import Model.Movimento;
import Model.MovimentoItemModel;
import Model.ParamentroModel;
import Model.UsuarioModel;
import Util.Calculo;
import Util.LogUtil;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import json_xml_iva.RSA;

/**
 *
 * @author celso & Emanuel Lima
 */
public class NotaCredito extends javax.swing.JFrame {

    /**
     * Creates new form FrmNotaCredito
     */
    private UsuarioModel usuario;
    private String obs = "Anulação REFERENTE À: ";

    private double totalMovimento = 0;

    private List<FacturaItemModel> listaItem = new ArrayList<>();
    int numFacturaLast = -1;
    private int idArmazem = 0;
    
    public NotaCredito() {
        initComponents();
        carregarCliente();
        this.armazemPrincipal();
    }

    public NotaCredito(UsuarioModel usuario) {
        initComponents();
        carregarCliente();
        dataOperacao.setDate(new Date());
        this.usuario = usuario;
        this.armazemPrincipal();
    }

    private void carregarCliente() {

        ClienteController controller = new ClienteController();
        List<ClienteModel> lista = controller.get(txtPesquisar.getText());
        cboCliente.setModel(new DefaultComboBoxModel(lista.toArray()));
        cboClienteRetificar.setModel(new DefaultComboBoxModel(lista.toArray()));
    }

//    private void carregarFactura(JComboBox cboCli) {
//
//        FacturaController fController = new FacturaController();
//        ClienteModel modelo = (ClienteModel) cboCli.getSelectedItem();
//        List<FacturaModel> lista1 = fController.getFacturaNaoEliminada(modelo.getId(), txtPesquisarFactura.getText());
//        List<FacturaModel> lista2 = fController.getFacturaNaoEliminada(modelo.getId(), txtPesquisarFactura2.getText());
//        cboFactura.setModel(new DefaultComboBoxModel(lista1.toArray()));
//        cboFacturaRectificar.setModel(new DefaultComboBoxModel(lista2.toArray()));
//    }
    private void carregarFactura(JComboBox cboCli, JComboBox cboFactura, boolean isRetificacao) {

        FacturaController fController = new FacturaController();
        ClienteModel modelo = (ClienteModel) cboCli.getSelectedItem();
        List<FacturaModel> lista;
        if (isRetificacao) {
            lista = fController.getFacturaNaoEliminada(modelo.getId(), txtPesquisarFactura2.getText());
        } else {
            lista = fController.getFacturaNaoEliminada(modelo.getId(), txtPesquisarFactura.getText());
        }

        cboFactura.setModel(new DefaultComboBoxModel(lista.toArray()));

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        dataOperacao = new com.toedter.calendar.JDateChooser();
        btnGravar = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        btnReimprimir = new javax.swing.JButton();
        cboCliente = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtPesquisar = new javax.swing.JTextField();
        cboFactura = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        txtValorFactura = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtPesquisarFactura = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        btnGravarRetificacao = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        btnReimprimir1 = new javax.swing.JButton();
        cboClienteRetificar = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        txtPesqClienteRect = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        cboFacturaRectificar = new javax.swing.JComboBox<>();
        jLabel14 = new javax.swing.JLabel();
        cboProdutoFactura = new javax.swing.JComboBox<String>();
        btnRemover = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbNovoItem = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        txtPesquisarFactura2 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Nota de Credito");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGUENS/BANNE.png"))); // NOI18N

        btnGravar.setText("Gravar");
        btnGravar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGravarActionPerformed(evt);
            }
        });

        jButton2.setText("Lista de Crédito");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        btnReimprimir.setText("Reimprimir");
        btnReimprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReimprimirActionPerformed(evt);
            }
        });

        cboCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboClienteActionPerformed(evt);
            }
        });

        jLabel1.setText("Cliente");

        jLabel2.setText("Pesquisar");

        txtPesquisar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPesquisarKeyReleased(evt);
            }
        });

        cboFactura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboFacturaActionPerformed(evt);
            }
        });

        jLabel3.setText("Nº Factura");

        txtValorFactura.setEnabled(false);

        jLabel5.setText("Data da Operação");

        txtPesquisarFactura.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPesquisarFacturaKeyReleased(evt);
            }
        });

        jLabel4.setText("Pesquisar");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 860, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(89, 89, 89)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel5))
                        .addGap(31, 31, 31)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(cboFactura, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(dataOperacao, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtValorFactura, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)
                                    .addComponent(txtPesquisarFactura)))
                            .addComponent(cboCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 406, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(152, 152, 152)
                        .addComponent(btnGravar, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnReimprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel8)
                .addGap(36, 36, 36)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(cboCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboFactura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(txtPesquisarFactura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtValorFactura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dataOperacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(154, 154, 154)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnGravar, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnReimprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(187, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Anulação", jPanel1);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGUENS/BANNE.png"))); // NOI18N

        btnGravarRetificacao.setText("Gravar");
        btnGravarRetificacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGravarRetificacaoActionPerformed(evt);
            }
        });

        jButton3.setText("Lista de Crédito");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        btnReimprimir1.setText("Reimprimir");
        btnReimprimir1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReimprimir1ActionPerformed(evt);
            }
        });

        cboClienteRetificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboClienteRetificarActionPerformed(evt);
            }
        });

        jLabel11.setText("Cliente");

        jLabel12.setText("Pesquisar");

        txtPesqClienteRect.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPesqClienteRectKeyReleased(evt);
            }
        });

        jLabel13.setText("Nº Factura");

        cboFacturaRectificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboFacturaRectificarActionPerformed(evt);
            }
        });

        jLabel14.setText("Produto / Item");

        btnRemover.setText("Remover");
        btnRemover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoverActionPerformed(evt);
            }
        });

        tbNovoItem.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Produto", "P.Unitario", "Qtd", "Sub.Total", "Desc", "IVA", "Total"
            }
        ));
        jScrollPane1.setViewportView(tbNovoItem);

        jLabel6.setText("Pesquisar");

        txtPesquisarFactura2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPesquisarFactura2KeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 768, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(txtPesqClienteRect, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(217, 217, 217)
                        .addComponent(btnGravarRetificacao, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnReimprimir1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cboClienteRetificar, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11)
                            .addComponent(jLabel14))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addGap(125, 125, 125)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtPesquisarFactura2))
                            .addComponent(cboFacturaRectificar, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(cboProdutoFactura, javax.swing.GroupLayout.PREFERRED_SIZE, 649, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnRemover, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 848, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtPesqClienteRect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtPesquisarFactura2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel6))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel11)
                        .addComponent(jLabel13)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboClienteRetificar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cboFacturaRectificar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboProdutoFactura, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRemover))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(67, 67, 67)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnGravarRetificacao, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnReimprimir1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15))
        );

        jTabbedPane1.addTab("Retificação", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 847, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void cboClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboClienteActionPerformed
        // TODO add your handling code here:
        carregarFactura(cboCliente, cboFactura, false);
//        FacturaController fController = new FacturaController();
        ClienteModel modelo = (ClienteModel) cboCliente.getSelectedItem();


    }//GEN-LAST:event_cboClienteActionPerformed

    private void txtPesquisarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPesquisarKeyReleased
        // TODO add your handling code here:
        carregarCliente();
    }//GEN-LAST:event_txtPesquisarKeyReleased

    private void cboFacturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboFacturaActionPerformed
        // TODO add your handling code here:
        FacturaController fController = new FacturaController();
        FacturaModel fmodel = (FacturaModel) cboFactura.getSelectedItem();
        txtValorFactura.setText(Calculo.converterCash(fmodel.getTotalApagar()));
        cboFacturaRectificar.setModel(new DefaultComboBoxModel());

    }//GEN-LAST:event_cboFacturaActionPerformed
    public String getNextFacturaSimples(String status, int nFact) {
        DocumentoController12 docController = new DocumentoController12();
        int last = docController.getLastInsertAno(status);
        int next = last;

        FacturaController facturaController = new FacturaController();
        int idSerie = facturaController.getIdSerie();

        String serie = facturaController.getSerie().trim();

//        return next + "/"+""+facturaController.getSerie()+"/"+ Data.getAnoActual() +" -REF " + nFact;
        return serie + DataComponent.getAnoActual() + "/" + next;
    }

    private String updateNumeracao() {

        MovimentoController fController = new MovimentoController();
        String designacao, prefixo;

        designacao = "NOTA CREDITO";
        prefixo = "NC ";
        numFacturaLast = fController.getLastIdByUsuario(usuario);
//        String next = getNextFactura(designacao);
//        System.out.println("next >>>>"+next);
        String nextSimples = getNextFacturaSimples(designacao, numFacturaLast);
        nextSimples = prefixo + nextSimples;
        System.out.println("nextSimples >>>>" + nextSimples);
//        Documento modelo = docController.getAll(designacao);
//        modelo.setNext(String.valueOf(numFacturaLast));

        fController.updateNextFactura(nextSimples, numFacturaLast);

        DocumentoController12 docController = new DocumentoController12();
        docController.updateNextNumDoc(designacao);

        return nextSimples;
    }

    private void btnGravarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGravarActionPerformed
        // TODO add your handling code here:

        try {

            ClienteModel cliente = (ClienteModel) cboCliente.getSelectedItem();
            FacturaModel factura = (FacturaModel) cboFactura.getSelectedItem();

            ParamentroController paramentroController = new ParamentroController();
            ParamentroModel moduloFormacao = paramentroController.getById(7);

            if (factura != null) {
                factura.setEstado(new EstadoModel(3, ""));

                String data = DataComponent.getDataActual();
                String dataOperacao = DataComponent.getData(this.dataOperacao);

                double valorFactura = Calculo.getValueNormal(txtValorFactura.getText());

                String tipoMovimento = "C";//CREDITO

                Movimento modelo = new Movimento(obs, tipoMovimento, valorFactura, cliente, factura, data, dataOperacao, usuario);
                modelo.setCriada_modulo_formacao(moduloFormacao.getValor() == 1);
                if (!modelo.isEmpty()) {

                    MovimentoController controller = new MovimentoController();

                    int lastId = controller.getLast();

                    if (controller.save(modelo)) {
                        modelo.setId(controller.getLast());
                        saveMovimentoItems(modelo);

                        int idMovimento = controller.getLastIdByUsuario(usuario);
                        modelo.setId(idMovimento);
                        Movimento notaAnterior = controller.getById(lastId);
                        String hashAnterior = "";

                        if (notaAnterior != null) {

                            hashAnterior = notaAnterior.getHash();

                        }

                        String referencia = updateNumeracao();
                        String vector[] = referencia.split("-REF");
                        referencia = vector[0].trim();

                        String hashcode = RSA.executeAlgRSA(modelo.getData(), referencia, String.valueOf(factura.getTotalApagar()), hashAnterior);
                        String facturaRef = RSA.getValorCaracterHash(hashcode);

                        if (controller.updateHashReference(hashcode, facturaRef, idMovimento)) {

                            ClienteController clienteController = new ClienteController();

                            if (clienteController.updateCarteira(cliente)) {

                                FacturaController fController = new FacturaController();

                                if(fController.updateEstado(factura)){
                                    
                                    FacturaItemController fiController = new FacturaItemController();
                                    for(FacturaItemModel fi : fiController.getItemByIdFactura(factura.getId())){
                                        
                                        if(fi.getProduto().isStocavel()){

                                                aumentarQtd(fi);
                                        }
                                    
                                    }
                                }
                                
                                
                                
                                JOptionPane.showMessageDialog(this, "Operacao realizada com sucesso");
                                modelo.setId(controller.getLastIdByUsuario(usuario));
                                MovimentoIreport.getById(modelo, true, true);
                                LogUtil.log.salvarLog(TipoLog.INFO, " Anulou a factura ( "+modelo.getFactura().getNextFactura()+" )");
                                limpar();
                                carregarFactura(cboCliente, cboFactura, false);
                            }
                        }
                    }

                } else {
                    JOptionPane.showMessageDialog(this, "Preenche o espaço em branco");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Nenhuma factura selecionada");
            }

        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Valor digitado incorrecto");
        } catch (Exception ex) {
            ex.printStackTrace();
        }


    }//GEN-LAST:event_btnGravarActionPerformed

    public void saveMovimentoItems(Movimento movimento) {
        MovimentoItemModel modelo = new MovimentoItemModel();
        modelo.setMovimento(movimento);

        MovimentoItemController movimentoItemController = new MovimentoItemController();
        FacturaItemController facturaItemController = new FacturaItemController();

        for (FacturaItemModel item : facturaItemController.getItemByIdFactura(movimento.getFactura().getId())) {
            modelo.setFacturaItemModel(item);
            movimentoItemController.saveOrUpdate(modelo);
        }
    }

    public void saveMovimentoItem(Movimento movimento) {
        MovimentoItemModel modelo = new MovimentoItemModel();
        modelo.setMovimento(movimento);

        MovimentoItemController movimentoItemController = new MovimentoItemController();
        FacturaItemController facturaItemController = new FacturaItemController();

        for (FacturaItemModel item : facturaItemController.getItemByIdFactura(movimento.getFactura().getId())) {
            modelo.setFacturaItemModel(item);
            movimentoItemController.saveOrUpdate(modelo);
        }
    }

    private void limpar() {

        listaItem = new ArrayList<>();
        numFacturaLast = -1;
        txtValorFactura.setText("");
        cboFactura.setModel(new DefaultComboBoxModel());
        limparTable();
//        DefaultTableModel defaultTb = new DefaultTableModel();
//        tbNovoItem.setModel(defaultTb);

    }
    private void btnReimprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReimprimirActionPerformed
        // TODO add your handling code here:
        new BuscarFacturaView().setVisible(true);
    }//GEN-LAST:event_btnReimprimirActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        new ListaMovimentoView("C").setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void btnGravarRetificacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGravarRetificacaoActionPerformed
        // TODO add your handling code here:

        try {

            ClienteModel cliente = (ClienteModel) cboClienteRetificar.getSelectedItem();
            FacturaModel factura = (FacturaModel) cboFacturaRectificar.getSelectedItem();
//            factura.setEstado(new EstadoModel(3, ""));
            ParamentroController paramentroController = new ParamentroController();
            ParamentroModel moduloFormacao = paramentroController.getById(7);
            if (factura != null) {

                String data = DataComponent.getDataActual();
                String dataOperacao = DataComponent.getData(this.dataOperacao);

                String tipoMovimento = "C";//CREDITO

                Movimento modelo = new Movimento("Rectificação REFERENTE À: ", tipoMovimento, getValorTotalItems(), cliente, factura, data, dataOperacao, usuario);
                modelo.setCriada_modulo_formacao(moduloFormacao.getValor() == 1);
                boolean flag = false;
                if (!modelo.isEmpty()) {

                    MovimentoController controller = new MovimentoController();

                    int lastId = controller.getLast();
                    if (controller.save(modelo)) {

                        int idMovimento = controller.getLastIdByUsuario(usuario);
                        modelo.setId(idMovimento);
                        Movimento notaAnterior = controller.getById(lastId);
                        String hashAnterior = "";
                        if (notaAnterior != null) {

                            hashAnterior = notaAnterior.getHash();

                        }

                        String referencia = updateNumeracao();
                        String vector[] = referencia.split("-REF");
                        referencia = vector[0].trim();
                        String hashcode = RSA.executeAlgRSA(modelo.getData(), referencia, String.valueOf(totalMovimento), hashAnterior);
                        String facturaRef = RSA.getValorCaracterHash(hashcode);

                        if (controller.updateHashReference(hashcode, facturaRef, idMovimento)) {

                            for (FacturaItemModel facturaItemModel : listaItem) {

                                MovimentoItemModel itemModel = new MovimentoItemModel(facturaItemModel);
                                itemModel.setMovimento(modelo);

                                MovimentoItemController movimentoItemController = new MovimentoItemController();

                                if (movimentoItemController.saveOrUpdate(itemModel)) {
                                    
                                    EstadoModel estado = new EstadoModel(3, "");
                                    facturaItemModel.setEstado(estado);
                                    facturaItemModel.setFactura(factura);

                                    FacturaItemController facturaItemController = new FacturaItemController();

                                    if(facturaItemController.update(facturaItemModel)){
                                        
                                        if(facturaItemModel.getProduto().isStocavel())
                                            aumentarQtd(facturaItemModel);
                                    }

                                    flag = true;

                                }

                                // ClienteController clienteController = new ClienteController();
                                //  if (clienteController.updateCarteira(cliente)) {
                                //  }
                            }

                            if (flag) {

                                FacturaItemController facturaItemController = new FacturaItemController();

                                FacturaController fController = new FacturaController();

                                if (facturaItemController.getItemNaoEliminadoByIdFactura(factura.getId()).size() <= 0) {
                                    EstadoModel estado = new EstadoModel(3, "");
                                    factura.setEstado(estado);
                                    fController.updateEstado(factura);
                                    modelo.setObs(obs);
                                    controller.saveOrUpdate(modelo);
                                }
                                JOptionPane.showMessageDialog(this, "Operacao realizada com sucesso");
                                MovimentoIreport.getById(modelo, true, true);
                                LogUtil.log.salvarLog(TipoLog.INFO, " Retificou a factura ( "+modelo.getFactura().getNextFactura()+" )");
                                limpar();
                                carregarFactura(cboClienteRetificar, cboFacturaRectificar, true);
                            }
                        }
                    }

                } else {
                    JOptionPane.showMessageDialog(this, "Preenche o espaço em branco");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Nenhum factura selecionada");
            }
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Valor digitado incorrecto");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnGravarRetificacaoActionPerformed

    private void armazemPrincipal() {

        ParamentroController controller = new ParamentroController();
        ParamentroModel modelo = controller.getById(6);

        if (modelo.getValor() > 0) {//remover

            idArmazem = modelo.getValor();

        } else {
            
            JOptionPane.showMessageDialog(this, "Não foi definido armazem Principal");
        }

    }
    
    private List<EntradaStockItemModel> getEntradaItem(FacturaItemModel e) {

        EntradaStockItemController controller = new EntradaStockItemController();
        return controller.getQtd(e.getLote(), idArmazem);

    }
    
    public void definirEntraProdutoItemEmUso(EntradaStockItemModel e){
            
            EntradaStockItemController entradaStockItemController = new EntradaStockItemController();
            EntradaStockItemModel entraNovaUso = new EntradaStockItemModel();
            entraNovaUso = getItemUso(entradaStockItemController.getPendentes(e.getProduto()),e);
            
            System.out.println("\nentrada: ----"+e.getQtd()+"estdo"+e.getEstado().getId()+"\nNOvo:---"+entraNovaUso.getQtd()+"estado:----"+entraNovaUso.getEstado().getId());
            
            
            if(entradaStockItemController.saveOrUpdate(e)){
                
                if(entradaStockItemController.saveOrUpdate(entraNovaUso)){
                    
                    if(e.getId() != entraNovaUso.getId()){
                        
                        if(e.getEstado().getId() == 11){ // significa que o produto comercializado expirou
                            JOptionPane.showMessageDialog(null, "O produto anterior Expirou\n"
                                + "Passara a se vender outros Apartir de Deste Momento!\nOBS: Por-favor informe ao Administrador");
                    
                        }else{
                            if(e.getEstado().getId() == 12){ // significa que esgotou 
                                JOptionPane.showMessageDialog(null, "O produto anterior Terminou\n"
                                + "Passara a se vender outros Apartir de Deste Momento!\nOBS: Por-favor informe ao Administrador");
                                
                            }else{ // significa que devido a ordem passara para pendente
                                
                                JOptionPane.showMessageDialog(null, "O produto anterior Estará Pendente Devido a forma de ordenação\n("+e.getProduto().getOrganizacao()
                                + ")\nPassara a se vender outros Apartir de Deste Momento!\nOBS: Por-favor informe ao Administrador");
                            }
                        }
                    }else{
                        
                        if(e.getEstado().getId() == 11){ // significa que o produto comercializado expirou
                            JOptionPane.showMessageDialog(null, "O produto anterior Expirou\n\nOBS: Por-favor informe ao Administrador");
                    
                        }else
                            if(e.getEstado().getId() == 12){ // significa que o produto comercializado expirou
                                JOptionPane.showMessageDialog(null, "O produto anterior Terminou\n\nOBS: Por-favor informe ao Administrador");
                            }
                    }
                }
            }
            
            
        }
        
        public EntradaStockItemModel getItemUso(List<EntradaStockItemModel> items, EntradaStockItemModel e){
            EntradaStockItemModel novo = new EntradaStockItemModel();
            System.out.println("entrada: ----"+e.getQtd()+"\nentradas:---"+items.size());
            if(e.getQtd() <= 0){
                
                if(e.getProduto().isStocavel()){// verifica se o produto é stocavel
                    if(items.size() > 0){

                    e.setEstado(new EstadoModel(12, ""));
                    items.get(0).setEstado(new EstadoModel(1, ""));
                    novo = items.get(0);

                    }else{
                        e.setEstado(new EstadoModel(12, ""));
                        novo = e;

                    }
                }else{
                        novo = e;
                    }
                
            }else{
                
                if(e.getEstado().getId() == 11){// se expirar
                    
                    if(items.size() > 0){
                        
                    items.get(0).setEstado(new EstadoModel(1, ""));
                    novo = items.get(0);
                    
                    }else{
                        novo = e;
                    }
                }else{
                    
                    novo = e;
                }
            }
            
            for(EntradaStockItemModel modelo : items){ // primeiro a entrar primeiro a sair
                if(e.getProduto().getOrganizacao().equalsIgnoreCase("ORDEM DE CHEGADA( PRIMEIRO A  ENTRAR PRIMEIRO A SAIR)")){
                    if(DataComponent.compareData(novo.getEntrada().getData(), modelo.getEntrada().getData())){
                            
                            if(e.getEstado().getId() != 11){
                                e.setEstado(new EstadoModel(13, ""));
                            }
                            modelo.setEstado(new EstadoModel(1, ""));
                        
                            novo = modelo;
                    }
                }else{ 
                    
                    if(e.getProduto().getOrganizacao().equalsIgnoreCase("ORDEM DE CHEGADA( ULTIMO A  ENTRAR PRIMEIRO A SAIR)")){ // ultimo a entrar primeiro a sair
                        if(DataComponent.compareData(modelo.getEntrada().getData(), novo.getEntrada().getData())){
                            
                            if(e.getEstado().getId() != 11){
                                e.setEstado(new EstadoModel(13, ""));
                            }
                            modelo.setEstado(new EstadoModel(1, ""));
                            
                            novo = modelo;
                        }
                    }else{ // pela data de expircao
                        if(DataComponent.compareData(novo.getDataExpiracao(), modelo.getDataExpiracao())){
                            
                            if(e.getEstado().getId() != 11){
                                e.setEstado(new EstadoModel(13, ""));
                            }
                            modelo.setEstado(new EstadoModel(1, ""));
                            
                            novo = modelo;
                        }
                    }
                 
                }
                
            }
            return novo;
        }
    
    private void aumentarQtd(FacturaItemModel itemModel) {

        double qtdNova = itemModel.getQtd();
        List<EntradaStockItemModel> lista = getEntradaItem(itemModel);
        EntradaStockItemController controller = new EntradaStockItemController();
        //EntradaStockItemModel novo = getItemUso(lista, controller.getUso(itemModel.getProduto()));
        for (EntradaStockItemModel e : lista) {

            if (idArmazem > 0) {
                if (idArmazem == e.getArmazem().getId()) {
                    
                        qtdNova += e.getQtd();
                        e.setQtd(qtdNova);
                        controller.updateItem(e);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Não foi selecionado armazem principal");
                return;
            }

        }

    }
    
    public double getValorTotalItems() {
        double valorTotal = 0.0;
        for (FacturaItemModel item : listaItem) {
            valorTotal += item.getTotal();
        }
        return valorTotal;
    }

    public void limparTable() {
        DefaultTableModel tabela = (DefaultTableModel) tbNovoItem.getModel();
        tabela.setNumRows(0);
        tbNovoItem.setModel(tabela);
    }

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        new ListaMovimentoView("C").setVisible(true);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void btnReimprimir1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReimprimir1ActionPerformed
        // TODO add your handling code here:
        new BuscarFacturaView().setVisible(true);
    }//GEN-LAST:event_btnReimprimir1ActionPerformed

    private void cboClienteRetificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboClienteRetificarActionPerformed
        // TODO add your handling code here:
        carregarFactura(cboClienteRetificar, cboFacturaRectificar, true);
    }//GEN-LAST:event_cboClienteRetificarActionPerformed

    private void txtPesqClienteRectKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPesqClienteRectKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPesqClienteRectKeyReleased

    private void cboFacturaRectificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboFacturaRectificarActionPerformed
        // TODO add your handling code here:

        FacturaModel facturaModel = (FacturaModel) cboFacturaRectificar.getSelectedItem();

        if (facturaModel != null) {

            FacturaItemController controller = new FacturaItemController();
            List<FacturaItemModel> facturaItemModels = controller.getItemNaoEliminadoByIdFactura(facturaModel.getId());
            cboProdutoFactura.setModel(new DefaultComboBoxModel(facturaItemModels.toArray()));
            cboFactura.setModel(new DefaultComboBoxModel());

        }
    }//GEN-LAST:event_cboFacturaRectificarActionPerformed

    private void btnRemoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoverActionPerformed
        // TODO add your handling code here:

        FacturaItemModel facturaItemModel = (FacturaItemModel) cboProdutoFactura.getSelectedItem();
        if (facturaItemModel != null) {

            listaItem.add(facturaItemModel);

            DefaultTableModel defaultTb = (DefaultTableModel) tbNovoItem.getModel();

            Adicionar(defaultTb);

            cboProdutoFactura.removeItem(facturaItemModel);
        }
    }//GEN-LAST:event_btnRemoverActionPerformed

    private void txtPesquisarFacturaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPesquisarFacturaKeyReleased
        // TODO add your handling code here:
        carregarFactura(cboCliente, cboFactura, false);
    }//GEN-LAST:event_txtPesquisarFacturaKeyReleased

    private void txtPesquisarFactura2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPesquisarFactura2KeyReleased
        // TODO add your handling code here:
        carregarFactura(cboClienteRetificar, cboFacturaRectificar, true);
    }//GEN-LAST:event_txtPesquisarFactura2KeyReleased
    private void Adicionar(DefaultTableModel defaultTb) {

        totalMovimento = 0;
        defaultTb.setRowCount(0);
        for (FacturaItemModel facturaItemModel : listaItem) {

            totalMovimento += facturaItemModel.getTotal();
            defaultTb.addRow(new Object[]{
                facturaItemModel,
                facturaItemModel.getPreco(),
                facturaItemModel.getQtd(),
                facturaItemModel.getSubTotal(),
                facturaItemModel.getDesconto(),
                facturaItemModel.getIva(),
                facturaItemModel.getTotal()
            });
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NotaCredito.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NotaCredito.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NotaCredito.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NotaCredito.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NotaCredito().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGravar;
    private javax.swing.JButton btnGravarRetificacao;
    private javax.swing.JButton btnReimprimir;
    private javax.swing.JButton btnReimprimir1;
    private javax.swing.JButton btnRemover;
    private javax.swing.JComboBox<String> cboCliente;
    private javax.swing.JComboBox<String> cboClienteRetificar;
    private javax.swing.JComboBox<String> cboFactura;
    private javax.swing.JComboBox<String> cboFacturaRectificar;
    private javax.swing.JComboBox<String> cboProdutoFactura;
    private com.toedter.calendar.JDateChooser dataOperacao;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable tbNovoItem;
    private javax.swing.JTextField txtPesqClienteRect;
    private javax.swing.JTextField txtPesquisar;
    private javax.swing.JTextField txtPesquisarFactura;
    private javax.swing.JTextField txtPesquisarFactura2;
    private javax.swing.JTextField txtValorFactura;
    // End of variables declaration//GEN-END:variables
}
