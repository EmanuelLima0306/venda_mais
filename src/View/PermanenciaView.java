/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Controller.CaixaController;
import Controller.CategoriaABController;
import Controller.EntradaStockController;
import Controller.EntradaStockItemController;
import Controller.FacturaItemController;
import Controller.FormaPagamentoController;
import Controller.FornecedorController;
import Controller.ParamentroController;
import Controller.PermanenteController;
import Controller.PermanenteItemController;
import Controller.ProdutoController;
import Controller.UsuarioController;
import Ireport.PermanenteIreport;
import Model.CaixaModel;
import Model.CategoriaModel;
import Model.EntradaStockItemModel;
import Model.EntradaStockModel;
import Model.EstadoModel;
import Model.FacturaItemModel;
import Model.FacturaModel;
import Model.FormaPagamentoModel;
import Model.FornecedorModel;
import Model.ParamentroModel;
import Model.PermanenteItemModel;
import Model.PermanenteModel;
import Model.ProdutoModel;
import Model.UsuarioModel;
import Util.Calculo;
import Util.DataComponent;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.SignatureException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JDesktopPane;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import json_xml_iva.RSA;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;

/**
 *
 * @author emanuel
 */
public class PermanenciaView extends javax.swing.JFrame {

    private UsuarioModel usuario;
    private DefaultTableModel tb, tbView;
    private JDesktopPane desktop;
    private double total = 0;
    private PermanenteModel eModelo = null;
    int idArmazem = 0;
    double qtdReduzir = 0;

    public PermanenciaView() {
        initComponents();
    }

    public PermanenciaView(UsuarioModel usuario) {
        initComponents();
        this.usuario = usuario;
        inicializar();
    }

    private void inicializar() {
        eModelo = null;
        AutoCompleteDecorator.decorate(cboProduto);
        usuarios();
        categoria();
        tb = (DefaultTableModel) tbItem.getModel();
        tbView = (DefaultTableModel) tbItemView.getModel();
        DataFactura.setMaxSelectableDate(new Date());
        carregarEntradas();
        this.armazemPrincipal();
    }

    public void carregarEntradas() {
        pesquisar("");
    }

    public void pesquisar(String pesqisa) {
        tbView.setRowCount(0);
        PermanenteController pc = new PermanenteController();
        for (PermanenteModel model : pc.get(pesqisa)) {
            tbView.addRow(new Object[]{
                model.getCaixa().getDataAbertura(),
                model.getCaixa().getDataFecho(),
                model,
                Calculo.converterCash(model.getTotalMulticaixa()),
                Calculo.converterCash(model.getTotalNumerario()),
                model.getUsuario().getNome()
            });
        }
    }
    
    private void armazemPrincipal() {

        ParamentroController controller = new ParamentroController();
        ParamentroModel modelo = controller.getById(6);

        if (modelo.getValor() > 0) {//remover

            idArmazem = modelo.getValor();

        }

    }

    private void usuarios() {

        UsuarioController controller = new UsuarioController();
        cboUsuario.setModel(new DefaultComboBoxModel(controller.getCaixaAberto().toArray()));
        AutoCompleteDecorator.decorate(cboUsuario);
    }

    private void produtos(CategoriaModel categoria) {

        ProdutoController controller = new ProdutoController();
        cboProduto.setModel(new DefaultComboBoxModel(controller.getByCategoria(categoria).toArray()));
        
    }
    private void categoria() {

        CategoriaABController controller = new CategoriaABController();
        cboCategoria.setModel(new DefaultComboBoxModel(controller.get().toArray()));
        AutoCompleteDecorator.decorate(cboCategoria);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        DataFactura = new com.toedter.calendar.JDateChooser();
        jLabel3 = new javax.swing.JLabel();
        cboProduto = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        cboUsuario = new javax.swing.JComboBox<>();
        txtSaida = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtPerca = new javax.swing.JTextField();
        btnRemoverItem = new javax.swing.JButton();
        btnAdicionar = new javax.swing.JButton();
        btnLimpar = new javax.swing.JButton();
        cboCategoria = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbItem = new javax.swing.JTable();
        btnGravar = new javax.swing.JButton();
        txtMulticaixa = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtNumerario = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel74 = new javax.swing.JLabel();
        txtPesquisar = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        tbItemView = new javax.swing.JTable();
        btnImprimir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(254, 254, 254));

        jLabel16.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGUENS/BANNE.png"))); // NOI18N

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Dados do Fecho"));

        jLabel2.setText("Data");

        jLabel3.setText("Produto");

        jLabel4.setText("Usu√°rio");

        txtSaida.setText("0");

        jLabel5.setText("Total Saida");

        jLabel7.setText("Total Perca");

        txtPerca.setText("0");

        btnRemoverItem.setBackground(new java.awt.Color(255, 255, 255));
        btnRemoverItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGUENS/limp.png"))); // NOI18N
        btnRemoverItem.setText("Remover Item");
        btnRemoverItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoverItemActionPerformed(evt);
            }
        });

        btnAdicionar.setBackground(new java.awt.Color(255, 255, 255));
        btnAdicionar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGUENS/addd2.png"))); // NOI18N
        btnAdicionar.setText("Adicionar");
        btnAdicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdicionarActionPerformed(evt);
            }
        });

        btnLimpar.setBackground(new java.awt.Color(255, 255, 255));
        btnLimpar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGUENS/cleanup_edges_filled_24px.png"))); // NOI18N
        btnLimpar.setText("Limpar");
        btnLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparActionPerformed(evt);
            }
        });

        cboCategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboCategoriaActionPerformed(evt);
            }
        });

        jLabel6.setText("Categoria");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel7)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(11, 11, 11)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtSaida)
                    .addComponent(DataFactura, javax.swing.GroupLayout.DEFAULT_SIZE, 242, Short.MAX_VALUE)
                    .addComponent(txtPerca)
                    .addComponent(cboCategoria, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel4Layout.createSequentialGroup()
                            .addComponent(btnAdicionar, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnLimpar, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnRemoverItem, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                            .addGap(36, 36, 36)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(cboProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addContainerGap()))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel4)
                        .addGap(78, 78, 78)
                        .addComponent(cboUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(cboUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DataFactura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cboCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtSaida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(12, 12, 12)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtPerca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)))
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cboProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRemoverItem, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAdicionar, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLimpar, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        tbItem.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Produto", "Total Sa√≠da", "Total Perca", "Pre√ßo", "Total", "Estado"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tbItem);

        btnGravar.setBackground(new java.awt.Color(255, 255, 255));
        btnGravar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGUENS/red.png"))); // NOI18N
        btnGravar.setText("Gravar");
        btnGravar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGravarActionPerformed(evt);
            }
        });

        jLabel9.setText("Val. Multicaixa");

        jLabel8.setText("Val. Numerario");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtMulticaixa)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNumerario, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnGravar, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnGravar, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMulticaixa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(txtNumerario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Cadastro", jPanel1);

        jPanel2.setBackground(new java.awt.Color(254, 254, 254));

        jLabel74.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel74.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGUENS/circ.png"))); // NOI18N

        txtPesquisar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPesquisarKeyReleased(evt);
            }
        });

        tbItemView.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Data de Abertura", "Data de Fecho", "Operador", "Val. Multicaixa", "Val. N√∫merario", "Controlador"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbItemView.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbItemViewMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tbItemView);

        btnImprimir.setBackground(new java.awt.Color(255, 255, 255));
        btnImprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGUENS/printer_error_24px.png"))); // NOI18N
        btnImprimir.setText("Reimprimir");
        btnImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 485, Short.MAX_VALUE)
                .addComponent(jLabel74)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane3)
                    .addContainerGap()))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnImprimir)
                    .addComponent(txtPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel74))
                .addContainerGap(444, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                    .addContainerGap(79, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap()))
        );

        jTabbedPane1.addTab("Listagem", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnAdicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdicionarActionPerformed

        if (isEmptyItem()) {

            try {
                    ProdutoModel produto = (ProdutoModel)cboProduto.getSelectedItem();
                    EntradaStockItemController controller = new EntradaStockItemController();
                    EntradaStockItemModel entradaModel = controller.getLast(produto);
                    double precoVenda = controller.getLotePrecoVenda(produto.getId(), entradaModel.getCodBarra()).getPrecoVenda();
                    double total = (Double.parseDouble(txtSaida.getText())+Double.parseDouble(txtPerca.getText()))*precoVenda;
                    tb.addRow(new Object[]{
                        produto,
                        Calculo.converterCash(Double.parseDouble(txtSaida.getText())),
                        Calculo.converterCash(Double.parseDouble(txtPerca.getText())),
                        Calculo.converterCash(precoVenda),
                        Calculo.converterCash(total),
                        new EstadoModel(1, "Activado")

                    });
                    limpar();
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this,
                        "Foi inserido um valor que viola a cl√°usula desta aplica√ß√£o\nVerifica as informa√ß√µes antes de adicionar",
                        "ERRO", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this,
                    "Preencha o espa√ßo em branco",
                    " ou verifique se o produto j√° foi adicionado", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnAdicionarActionPerformed

    public boolean isEmptyItem() {
        boolean existe = false;
        ProdutoModel produto, produtoAux;
        produto = (ProdutoModel) cboProduto.getSelectedItem();
        
        for (int i = 0; i < tbItem.getRowCount(); i++) {
            produtoAux = (ProdutoModel) tbItem.getValueAt(i, 0);
            existe = (produto.getId() == produtoAux.getId());
            if(existe)
                break;
        }
        return cboProduto.getSelectedItem() != null && DataFactura.getDate() != null
                && !txtSaida.getText().isEmpty() && !txtPerca.getText().isEmpty() 
                && Double.parseDouble(txtSaida.getText()) > -1 && Double.parseDouble(txtPerca.getText()) > -1 && !existe && qtdSuficiente(produto);
    }
    
    public boolean qtdSuficiente(ProdutoModel produto){
                    EntradaStockItemController controller = new EntradaStockItemController();
                    double existencia = controller.qtdSuficiente(produto);
                    double total = (Double.parseDouble(txtPerca.getText())+Double.parseDouble(txtSaida.getText()));
                    boolean suficiente;
                    suficiente = total <= existencia;
                    
                    if(suficiente)
                        return suficiente;
                    else
                    {
                        JOptionPane.showMessageDialog(this, "O Total das Percas e Sa√≠das √© maior que a Exist√™ncia\n"
                                + "                          S√≠das + Percas: "+total+"\nExist√™ncia: "+existencia);
                        return suficiente;
                    }
    }

    public void limpar() {
        
        txtSaida.setText("0");
        txtPerca.setText("0");
        txtMulticaixa.setText("0");
        txtNumerario.setText("0");
        btnAdicionar.setEnabled(true);
        eModelo = null;
        categoria();
        usuarios();
    }

    private void btnRemoverItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoverItemActionPerformed
        // TODO add your handling code here:

        int linhas[] = tbItem.getSelectedRows();
        if (linhas.length > 0) {

            for (int i = linhas.length - 1; i >= 0; i--) {

                tb.removeRow(linhas[i]);

            }

        } else {
            JOptionPane.showMessageDialog(this, "Nenhum item selecionado");
        }
    }//GEN-LAST:event_btnRemoverItemActionPerformed

    private void btnGravarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGravarActionPerformed
        // TODO add your handling code here:
        
        PermanenteController pc = new PermanenteController();
        if(eModelo != null){
            if(alterarPemante()){
                JOptionPane.showMessageDialog(this, "Caixa alterado com Sucesso");
                PermanenteIreport.listarPermanetne(eModelo);
                limpar();

            }
        }
        else{
                if(!pc.existe(DataComponent.getData(DataFactura.getDate()),(UsuarioModel) cboUsuario.getSelectedItem())){
                    Object[] opcao = {"Sim", "N√£o"};
                    if (tbItem.getRowCount() > 0 && eModelo == null) {

                        gravar();
                    } else {


                         if (JOptionPane.showOptionDialog(this, "Neste caixa n√£o houve percas ou Sa√≠das Diversas"
                                        + "\nDeseja Fechar o caixa?", " Alerta ", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, opcao, opcao[0]) == JOptionPane.YES_OPTION) {
                             gravar();
                         }
                         else{
                             JOptionPane.showMessageDialog(this, "Informe as sa√≠das ou as percas");
                         }
                    }
                }else{
                    JOptionPane.showMessageDialog(this, "J√° fez-se o fecho deste Caixa");
                }
        }
    }//GEN-LAST:event_btnGravarActionPerformed

    public void gravar(){
        PermanenteModel novoPermanente = gravarPermanente();
        if (gravarPermanenteItem(novoPermanente)) {
            fecharCaixa(novoPermanente.getCaixa());
            JOptionPane.showMessageDialog(this, "Opera√ß√£o realizada com sucesso");
            limpar();
            PermanenteIreport.listarPermanetne(novoPermanente);
            eModelo=null;
        }
    }
    
    public void fecharCaixa(CaixaModel caixaModel){
        System.out.println("Estado do caixa: "+caixaModel.getEstado());
        if(caixaModel.getEstado().equalsIgnoreCase("Aberto")){
            
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            CaixaController caixaController = new CaixaController();
            caixaModel.setDataFecho(dateFormat.format(new Date()));
            
            caixaModel.setEstado("Fechado");
            caixaController.update(caixaModel);
        }
    }
    
    private void tbItemViewMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbItemViewMouseClicked
        // TODO add your handling code here:
        
        if (evt.getClickCount() == 2) {
           int linha = tbItemView.getSelectedRow();
        if(linha > -1){
            PermanenteModel pm = (PermanenteModel) tbView.getValueAt(linha, 2);
            
            pm.setCategoria((CategoriaModel) cboCategoria.getSelectedItem());
            cboCategoria.setSelectedItem(pm.getCategoria());
            txtMulticaixa.setText(String.valueOf(pm.getTotalMulticaixa()));
            txtNumerario.setText(String.valueOf(pm.getTotalNumerario()));
            selecionarUsuario(pm);
            DataFactura.setDate(DataComponent.stringParaData(pm.getCaixa().getDataAbertura()));
            eModelo = pm;
            btnAdicionar.setEnabled(false);
            jTabbedPane1.setSelectedIndex(0);
            
        }else{
            JOptionPane.showMessageDialog(this, "De duplo click no Fecho que deseja alterar");
        }
        }
    }//GEN-LAST:event_tbItemViewMouseClicked
    
    public void selecionarUsuario(PermanenteModel pm){
        int n =  cboUsuario.getItemCount();
        n -= 1;
        while(n > -1){
            cboUsuario.setSelectedIndex(n);
            UsuarioModel u = (UsuarioModel) cboUsuario.getSelectedItem();
            if(u.getId() == pm.getCaixa().getUsuario().getId())
                break;
            n--;
        }
        
    }
    
    private void txtPesquisarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPesquisarKeyReleased
        // TODO add your handling code here:
        pesquisar(!txtPesquisar.getText().isEmpty() ? txtPesquisar.getText() : "");
    }//GEN-LAST:event_txtPesquisarKeyReleased

    private void btnLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparActionPerformed
        // TODO add your handling code here:
        limpar();
        inicializar();
        tb.setRowCount(0);
    }//GEN-LAST:event_btnLimparActionPerformed

    private void cboCategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboCategoriaActionPerformed
        // TODO add your handling code here:
        produtos((CategoriaModel) cboCategoria.getSelectedItem());
    }//GEN-LAST:event_cboCategoriaActionPerformed

    private void btnImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimirActionPerformed
        int linha = tbItemView.getSelectedRow();
        if(linha > -1){
            PermanenteModel pm = (PermanenteModel) tbView.getValueAt(linha, 2);
            PermanenteIreport.listarPermanetne(pm);
        }else{
            JOptionPane.showMessageDialog(this, "Selecione o Fecho a Remprimir");
        }
    }//GEN-LAST:event_btnImprimirActionPerformed

    public void setarCampos(PermanenteModel permante) {
        DataFactura.setDate(DataComponent.stringParaData(permante.getCaixa().getDataAbertura()));
        cboUsuario.setSelectedItem(permante.getUsuario());
        cboCategoria.setSelectedItem(permante.getCategoria());

    }
    
    private PermanenteModel gravarPermanente() {

        try{
            CaixaModel caixa = new CaixaController().getByDateAndUsuario(DataComponent.getData(DataFactura.getDate()),(UsuarioModel) cboUsuario.getSelectedItem());
            PermanenteModel modelo = new PermanenteModel();
            modelo.setCaixa(caixa);
            modelo.setCategoria((CategoriaModel) cboCategoria.getSelectedItem());
            modelo.setEstado(new EstadoModel(1, ""));
            modelo.setUsuario(usuario);
            modelo.setTotalMulticaixa(Double.parseDouble(txtMulticaixa.getText()));
            modelo.setTotalNumerario(Double.parseDouble(txtNumerario.getText()));


            if (!modelo.isEmpty()) {

                PermanenteController controller = new PermanenteController();

                if (controller.saveOrUpdate(modelo)) {

                    return controller.getLastPermanente(usuario);
                } else {
                    JOptionPane.showMessageDialog(this, "Ocorreu um erro ao dar entrada do stock", "ERRO 02-ASCEMIL/20", JOptionPane.ERROR_MESSAGE);
                }

            } else {
                JOptionPane.showMessageDialog(this, "Operador n√£o abrio o caixa neste dia");
            }
            return new PermanenteModel();
            
        } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this,
                        "Foi inserido um valor que viola a cl√°usula desta aplica√ß√£o\nVerifica as informa√ß√µes antes de adicionar",
                        "ERRO", JOptionPane.ERROR_MESSAGE);
            }
        return new PermanenteModel();
    }
    private boolean alterarPemante() {

        try{
            CaixaModel caixa = new CaixaController().getByDateAndUsuario(DataComponent.getData(DataFactura.getDate()),(UsuarioModel) cboUsuario.getSelectedItem());
            //eModelo.setCaixa(caixa);
            //eModelo.setCategoria((CategoriaModel) cboCategoria.getSelectedItem());
            eModelo.setUsuario(usuario);
            eModelo.setTotalMulticaixa(Double.parseDouble(txtMulticaixa.getText()));
            eModelo.setTotalNumerario(Double.parseDouble(txtNumerario.getText()));


            if (!eModelo.isEmpty()) {

                PermanenteController controller = new PermanenteController();

                if (controller.saveOrUpdate(eModelo)) {

                    return true;
                } else {
                    JOptionPane.showMessageDialog(this, "Ocorreu um erro ao dar entrada do stock", "ERRO 02-ASCEMIL/20", JOptionPane.ERROR_MESSAGE);
                }

            } else {
                JOptionPane.showMessageDialog(this, "Operador n√£o abrio o caixa neste dia");
            }
            return false;
            
        } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this,
                        "Foi inserido um valor que viola a cl√°usula desta aplica√ß√£o\nVerifica as informa√ß√µes antes de adicionar",
                        "ERRO", JOptionPane.ERROR_MESSAGE);
            }
        return false;
    }

    private boolean gravarPermanenteItem(PermanenteModel permanente) {

        boolean flag = false;
        if (permanente.getId() > 0) {
            
            eModelo = permanente;
            PermanenteItemController controller = new PermanenteItemController();
            FacturaItemController fc = new FacturaItemController();
            for (int i = 0; i < tbItem.getRowCount(); i++) {
                    
                    ProdutoModel p = (ProdutoModel) tbItem.getValueAt(i, 0);
                    EstadoModel e = (EstadoModel) tbItem.getValueAt(i, 5);
                    EntradaStockItemController controllers = new EntradaStockItemController();
                    EntradaStockItemModel entradaModel = controllers.getLast(p);
                    qtdReduzir = (Calculo.getValueNormal(tbItem.getValueAt(i, 1).toString())+Calculo.getValueNormal(tbItem.getValueAt(i, 2).toString()));
                    
                    reduzirQtd(entradaModel.getCodBarra(),qtdReduzir);
                    double existencia = controllers.getQtdExistencia(entradaModel.getCodBarra(), idArmazem);
                    double qtdEntrada = controllers.getQtdExistencia(entradaModel.getCodBarra(), idArmazem);
                    
                    FacturaItemModel f = fc.getItemByCaixaAndProduto(permanente.getCaixa(), p);
                    PermanenteItemModel modelo = new PermanenteItemModel();
                    modelo.setProduto(p);
                    modelo.setEstado(e);
                    modelo.setTotalSaida(Calculo.getValueNormal(tbItem.getValueAt(i, 1).toString()));
                    modelo.setTotalPerca(Calculo.getValueNormal(tbItem.getValueAt(i, 2).toString()));
                    modelo.setPreco(Calculo.getValueNormal(tbItem.getValueAt(i, 3).toString()));
                    modelo.setTotal(Calculo.getValueNormal(tbItem.getValueAt(i, 4).toString()));
                    modelo.setStock(existencia);
                    modelo.setTaxaIva(p.getTaxa().getTaxa());
                    
                    modelo.setPermanente(permanente);
                    if(f != null ){
                        
                        modelo.setTotalVendido(f.getTotal());
                        modelo.setQtdVendida(f.getQtd());
                    }else{
                        modelo.setTotalVendido(0);
                        modelo.setQtdVendida(0);
                        
                    }
                    
                    flag = controller.saveOrUpdate(modelo);
                    qtdReduzir = 0;
            }
            
            ProdutoController pc = new ProdutoController();
            for(ProdutoModel p : pc.get()){
                
                if(!controller.verificar(permanente.getCaixa(), p)){
                    
                    EntradaStockItemController controllers = new EntradaStockItemController();
                    EntradaStockItemModel entradaModel = controllers.getLast(p);
                    if(entradaModel != null){
                        double existencia = controllers.getQtdExistencia(entradaModel.getCodBarra(), idArmazem);
                        double precoVenda = controllers.getLotePrecoVenda(p.getId(), entradaModel.getCodBarra()).getPrecoVenda();

                        FacturaItemModel f = fc.getItemByCaixaAndProduto(permanente.getCaixa(), p);
                        PermanenteItemModel modelo = new PermanenteItemModel();
                        modelo.setProduto(p);
                        modelo.setEstado(new EstadoModel(1, ""));
                        modelo.setTotalSaida(0);
                        modelo.setTotalPerca(0);
                        modelo.setPreco(precoVenda);
                        modelo.setTotal(0);
                        modelo.setStock(existencia);
                        modelo.setTaxaIva(p.isIpc()?p.getTaxa().getTaxa():0);
                        modelo.setPermanente(permanente);
                        if(f != null ){

                            modelo.setTotalVendido(f.getTotal());
                            modelo.setQtdVendida(f.getQtd());
                        }else{
                            modelo.setTotalVendido(0);
                            modelo.setQtdVendida(0);

                        }

                        flag = controller.saveOrUpdate(modelo);
                    }else{
                        flag = false;
                    }    
                }

            }

        } 
        return flag;
    }
    
    
    private List<EntradaStockItemModel> getEntradaItem(String codBarra) {

        EntradaStockItemController controller = new EntradaStockItemController();
        return controller.getQtd(codBarra, idArmazem);

    }

    private void reduzirQtd(String codBarra, double qtd) {

        double qtdNova = qtd;
        List<EntradaStockItemModel> lista = getEntradaItem(codBarra);
        EntradaStockItemController controller = new EntradaStockItemController();
        for (EntradaStockItemModel e : lista) {
            System.out.println("produto " + e.getProduto() + "\ndata" + e.getDataExpiracao());
            if (idArmazem > 0) {
                if (idArmazem == e.getArmazem().getId()) {

                    if (qtdNova > e.getQtd()) {

                        qtdNova -= e.getQtd();
                        System.out.println("qtdNova"+ qtdNova +"-="+ e.getQtd());
                        
                        System.out.println("qtdFalta: "+qtdNova);
                        e.setQtd(0);

                        if (controller.updateItem(e)) {

                            definirEntraProdutoItemEmUso(e);
                            reduzirQtd(codBarra, qtdNova);
                        }

                    } else {
                        
                        System.out.println("qtd do stock"+ e.getQtd());
                        System.out.println("qtdSobra: "+(e.getQtd() - qtdNova));
                        e.setQtd(e.getQtd() - qtdNova);
                        if (controller.updateItem(e)) {
                            definirEntraProdutoItemEmUso(e);
                        }
                        return;
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "N√£o foi selecionado armazem principal");
                return;
            }

        }

    }

    public void definirEntraProdutoItemEmUso(EntradaStockItemModel e) {

        EntradaStockItemController entradaStockItemController = new EntradaStockItemController();
        EntradaStockItemModel entraNovaUso = new EntradaStockItemModel();
        entraNovaUso = getItemUso(entradaStockItemController.getPendentes(e.getProduto()), e);

        if (entradaStockItemController.saveOrUpdate(e)) {

            if (entradaStockItemController.saveOrUpdate(entraNovaUso)) {

                if (e.getId() != entraNovaUso.getId()) {

                    if (e.getEstado().getId() == 11) { // significa que o produto comercializado expirou
//                        JOptionPane.showMessageDialog(null, "O produto: " + e.getProduto().getDesignacao() + " anterior Expirou\n"
//                                + "Passara a se vender outros Apartir de Deste Momento!\nOBS: Por-favor informe ao Administrador");

                    } else {
                        if (e.getEstado().getId() == 12) { // significa que esgotou 
//                            JOptionPane.showMessageDialog(null, "O produto: " + e.getProduto().getDesignacao() + "  anterior Terminou\n"
//                                    + "Passara a se vender outros Apartir de Deste Momento!\nOBS: Por-favor informe ao Administrador");

                        } else { // significa que devido a ordem passara para pendente

//                            JOptionPane.showMessageDialog(null, "O produto: " + e.getProduto().getDesignacao() + "  anterior Estar√° Pendente Devido a forma de ordena√ß√£o\n(" + e.getProduto().getOrganizacao()
//                                    + ")\nPassara a se vender outros Apartir de Deste Momento!\nOBS: Por-favor informe ao Administrador");
                        }
                    }
                } else {

                    if (e.getEstado().getId() == 11) { // significa que o produto comercializado expirou
//                        JOptionPane.showMessageDialog(null, "O produto: " + e.getProduto().getDesignacao() + " anterior Expirou\n\nOBS: Por-favor informe ao Administrador");

                    } else if (e.getEstado().getId() == 12) { // significa que o produto comercializado expirou
//                        JOptionPane.showMessageDialog(null, "O produto: " + e.getProduto().getDesignacao() + " anterior Terminou\n\nOBS: Por-favor informe ao Administrador");
                    }
                }
            }
        }

    }

    public EntradaStockItemModel getItemUso(List<EntradaStockItemModel> items, EntradaStockItemModel e) {
        EntradaStockItemModel novo = new EntradaStockItemModel();
        System.out.println("entrada: ----" + e.getQtd() + "\nentradas:---" + items.size());
        if (e.getQtd() <= 0) {

            if (e.getProduto().isStocavel()) {// verifica se o produto √© stocavel
                if (items.size() > 0) {

                    e.setEstado(new EstadoModel(12, ""));
                    items.get(0).setEstado(new EstadoModel(1, ""));
                    novo = items.get(0);

                } else {
                    e.setEstado(new EstadoModel(12, ""));
                    novo = e;

                }
            } else {
                e.setEstado(new EstadoModel(1, ""));
                novo = e;
            }

        } else {

            if (e.getEstado().getId() == 11) {// se expirar

                if (items.size() > 0) {

                    items.get(0).setEstado(new EstadoModel(1, ""));
                    novo = items.get(0);

                } else {
                    novo = e;
                }
            } else {

                novo = e;
            }
        }

        for (EntradaStockItemModel modelo : items) { // primeiro a entrar primeiro a sair
            if (e.getProduto().getOrganizacao().equalsIgnoreCase("ORDEM DE CHEGADA( PRIMEIRO A  ENTRAR PRIMEIRO A SAIR)")) {
                if (DataComponent.compareData(novo.getEntrada().getData(), modelo.getEntrada().getData())) {

                    if (e.getEstado().getId() != 11) {
                        e.setEstado(new EstadoModel(13, ""));
                    }
                    modelo.setEstado(new EstadoModel(1, ""));

                    novo = modelo;
                }
            } else {

                if (e.getProduto().getOrganizacao().equalsIgnoreCase("ORDEM DE CHEGADA( ULTIMO A  ENTRAR PRIMEIRO A SAIR)")) { // ultimo a entrar primeiro a sair
                    if (DataComponent.compareData(modelo.getEntrada().getData(), novo.getEntrada().getData())) {

                        if (e.getEstado().getId() != 11) {
                            e.setEstado(new EstadoModel(13, ""));
                        }
                        modelo.setEstado(new EstadoModel(1, ""));

                        novo = modelo;
                    }
                } else { // pela data de expircao
                    if (DataComponent.compareData(novo.getDataExpiracao(), modelo.getDataExpiracao())) {

                        if (e.getEstado().getId() != 11) {
                            e.setEstado(new EstadoModel(13, ""));
                        }
                        modelo.setEstado(new EstadoModel(1, ""));

                        novo = modelo;
                    }
                }

            }

        }
        return novo;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PermanenciaView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PermanenciaView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PermanenciaView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PermanenciaView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PermanenciaView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser DataFactura;
    private javax.swing.JButton btnAdicionar;
    private javax.swing.JButton btnGravar;
    private javax.swing.JButton btnImprimir;
    private javax.swing.JButton btnLimpar;
    private javax.swing.JButton btnRemoverItem;
    private javax.swing.JComboBox<String> cboCategoria;
    private javax.swing.JComboBox<String> cboProduto;
    private javax.swing.JComboBox<String> cboUsuario;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel74;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable tbItem;
    private javax.swing.JTable tbItemView;
    private javax.swing.JTextField txtMulticaixa;
    private javax.swing.JTextField txtNumerario;
    private javax.swing.JTextField txtPerca;
    private javax.swing.JTextField txtPesquisar;
    private javax.swing.JTextField txtSaida;
    // End of variables declaration//GEN-END:variables
}
